#+TITLE: KESS - Keep Emacs Simple, Stupid!
#+STARTUP: content
#+OPTIONS: toc:4 h:4

* Preface
OK, the following configuration not *simple* at all, but I'm trying
achieve this goal as I'm getting more comfortable with emacs.

Also, I'm trying to make KESS work as I expect on all my OSs:
- Win7/Win10 (chocolatey emacs package, tried compile emacs on msys2,
  but no success)
- Debian/Ubuntu (apt-get emacs package)
- Arch Linux (pacman emacs package)
* Personal information
I'm doing this because [[https://github.com/sachac][Sacha Chua]] doing this. I got this [[https://github.com/sachac/.emacs.d][org-babel config]] idea
from her [[http://sachachua.com/blog/][amazing blog]]. Thanks Sacha!
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Tiefeng Wu"
        user-mail-address "icebergwtf@qq.com")
#+END_SRC
* Setup load paths
No custom load-path for now...
#+BEGIN_SRC emacs-lisp
  ;; (add-to-list 'load-path (concat user-emacs-directory "/lisp"))
#+END_SRC
* Package Setup
** package.el
Setup archive lists and initialize package.el
#+BEGIN_SRC emacs-lisp
  ;; package.el setup
  (let ((archives
         '((       "melpa" . "http://melpa.org/packages/")
           ("melpa-stable" . "http://melpa-stable.milkbox.net/packages/")
           (   "marmalade" . "http://marmalade-repo.org/packages/")
           (         "org" . "http://orgmode.org/elpa/"))))
    (when (< emacs-major-version 24)
      (add-to-list 'archives '("gnu" . "http://elpa.gnu.org/packages/")))
    (dolist (arch archives)
      (add-to-list 'package-archives arch)))
  (package-initialize)
#+END_SRC
** use-package
[[https://github.com/jwiegley/use-package][use-package]] is very handy for package management, also I use bind-key to define
my own key bindings.
#+BEGIN_SRC emacs-lisp
  ;; use-package setup
  (unless (package-installed-p 'use-package)
    (unless (assoc 'use-package package-archive-contents)
      (package-refresh-contents))
    (package-install 'use-package))

  (eval-when-compile
    (require 'use-package)
    (setq use-package-always-ensure t
          use-package-verbose t))

  ;; packages that use-package recommend
  (use-package diminish)
  (use-package bind-key
    :bind* (("C-`" . describe-personal-keybindings)))
#+END_SRC
* Default Setup
** better-defaults
Use [[https://github.com/technomancy/better-defaults][better-defaults]] package as start point
#+BEGIN_SRC emacs-lisp
(use-package better-defaults)
#+END_SRC
** emacs apperence
Load faviorite theme, and since I'm still an emacs newbie, I perfer to enable
menu bar under GUI mode, whenever I'm getting lost, menu bar come for rescue.
#+BEGIN_SRC emacs-lisp
  (load-theme 'tango-dark)
  (when window-system
    (menu-bar-mode 1)
    (if (equal system-type 'windows-nt)
        (add-hook 'after-init-hook 'toggle-frame-maximized)
      (add-hook 'after-init-hook 'toggle-frame-fullscreen)))
#+END_SRC
** My defaults
My perfered settings.
#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 4
                indent-tabs-mode nil
                show-trailing-whitespace t)

  (setq gc-cons-threshold 20000000
        gdb-many-windows t
        highlight-nonselected-windows t
        inhibit-startup-screen t
        linum-format "%4d"
        scroll-conservatively 9999
        scroll-margin 5
        scroll-step 1
        system-time-locale "C"
        tramp-default-method "ssh"
        diff-switches "-u"
        split-width-threshold 120
        split-height-threshold 40)

  (winner-mode 1)
  (show-paren-mode 1)
  (recentf-mode 1)
  (global-linum-mode 1)
  (column-number-mode 1)
#+END_SRC
* Custom prefix keymap
To not mess up with emacs's own prefix maps, my custom prefix binding use C-\,
which I think very easy to reach.
#+BEGIN_SRC emacs-lisp
  ;; C-\ prefix map for nearly all my custom bindings, to not mess up
  ;; default or other installed package's bindings
  (define-prefix-command 'kess-prefix-map)
  (bind-key* (kbd "C-\\") kess-prefix-map)
  (bind-keys :map kess-prefix-map
             ("C-\\" . set-mark-command)
             ("\\" . other-frame)
             ("0" . delete-frame)
             ("," . winner-undo)
             ("." . winner-redo)
             ("r" . comment-region)
             ("u" . uncomment-region))
#+END_SRC
* Orgmode
** Perfered settings
#+BEGIN_SRC emacs-lisp
(setq org-catch-invisible-edits 'smart
      org-completion-use-ido t
      org-ctrl-k-protect-subtree t
      org-enforce-todo-checkbox-dependencies t
      org-enforce-todo-dependencies t
      org-log-done 'time
      org-return-follows-link t
      org-special-ctrl-a/e t
      org-special-ctrl-k t
      org-special-ctrl-o t
      org-startup-indented t
      org-use-property-inheritance t)
#+END_SRC
** Keywords for todo tasks
#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO(t)" "|" "DONE(d)")
        (sequence "OPEN(o)" "INSPECT(i)" "|" "FIXED(f)" "CLOSED(c)" "WONTFIX(w)" "NOREPROD(n)")
        (sequence "QUESTION(q) | ANSWERED(a)")))
#+END_SRC
** Bindings
#+BEGIN_SRC emacs-lisp
  (bind-keys :map kess-prefix-map
             ("<tab>" . org-force-cycle-archived)
             ("a" . org-archive-to-archive-sibling)
             :map org-mode-map
             ("M-n" . org-forward-heading-same-level)
             ("M-p" . org-backward-heading-same-level))
  ;; org-mode global bindings
  (bind-keys* ("C-c a" . org-agenda)
              ("C-c b" . org-iswitchb)
              ("C-c c" . org-capture)
              ("C-c l" . org-store-link)
              ("C-c t" . org-tags-view))
#+END_SRC
* Global bindings
** buffer bindings
#+BEGIN_SRC emacs-lisp
  (bind-keys* ("M-`" . (lambda () (interactive) (kill-buffer (get-buffer (buffer-name)))))
              ("C-x S" . write-file)
              ("C-S-s" . save-some-buffers))

  (defun kess-switch-buffer (next)
    "Switch to non *[buffer]* buffer, use next-buffer when NEXT is t,
    otherwise, previous-buffer. (idea from stackoverflow)"
    (let ((bread-crumb (buffer-name))
          (fn (or (and next 'next-buffer) 'previous-buffer))
          (allowed-buffers '("*scratch*" "*info*" "*eshell*")))
      (funcall fn)
      (while (and (not (equal bread-crumb (buffer-name)))
                  (and (not (member (buffer-name) allowed-buffers))
                       (string-match-p "^\*.*\*$" (buffer-name))))
        (funcall fn))))

  (bind-keys*
   ("<C-tab>" . (lambda () (interactive) (kess-switch-buffer t)))
   ("<C-S-tab>" . (lambda () (interactive) (kess-switch-buffer nil)))
   ("<C-iso-lefttab>" . (lambda () (interactive) (kess-switch-buffer t)))
   ("<C-S-iso-lefttab>" . (lambda () (interactive) (kess-switch-buffer nil))))

  (defun kess-indent-buffer ()
    "Indent whole buffer."
    (interactive)
    (indent-region (point-min) (point-max) nil))

  ;; Ctrl+Alt+Shift+\ indent whole buffer
  (bind-key* (kbd "C-M-|") 'kess-indent-buffer)
#+END_SRC
** window bindings
*** Thoughts
In old Turbo C/Pascal code editor has a window size edit behavior. C-F5 start
change window size, then use S-left, S-Right, S-Up and S-Down to change current
window respect to the direction, press Enter to accept and leave size change
mode. Maybe write a minor mode to provide this?
*** Binding
#+BEGIN_SRC emacs-lisp
  (bind-keys* ("C-M-." . scroll-other-window)
              ("C-M-," . scroll-other-window-down)
              ("C-M-h" . windmove-left)
              ("C-M-j" . windmove-down)
              ("C-M-k" . windmove-up)
              ("C-M-l" . windmove-right))
#+END_SRC
** navigation bindings
#+BEGIN_SRC emacs-lisp
(bind-keys ("M-n" . forward-paragraph)
           ("M-p" . backward-paragraph))
#+END_SRC
** search and replace bindings
#+BEGIN_SRC emacs-lisp
(bind-keys* ("C-M-/" . query-replace)
            ("C-M-?" . query-replace-regexp))
#+END_SRC
** other bindings
#+BEGIN_SRC emacs-lisp
  (bind-keys* ("<backspace>" . delete-backward-char)
              ("M-\\" . hippie-expand)
              ("C-S-g" . occur))
#+END_SRC
* Essential packages
These're packages I think is essential.
** undo-tree
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :bind* (("C-z" . undo-tree-undo)
          ("C-/" . undo-tree-redo))
  :config
  (global-undo-tree-mode))
#+END_SRC
** smex
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :bind* (("M-x" . smex)
            ("M-X" . execute-extended-command)
            :map kess-prefix-map
            ("M-x" . smex-major-mode-commands)))
#+END_SRC
** company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :diminish company-mode
    :demand
    :bind (:map company-active-map
                ("M-n" . company-next-page)
                ("M-p" . company-previous-page)
                ("C-n" . company-select-next-or-abort)
                ("C-p" . company-select-previous-or-abort))
    :config
    (setq company-idle-delay 0.3
          company-tooltip-limit 12
          company-minimum-prefix-length 2)
    (global-company-mode 1))
#+END_SRC
** ivy
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :demand
    :diminish ivy-mode
    :bind (:map ivy-minibuffer-map
                ("C-j" . ivy-immediate-done)
                ("RET" . ivy-alt-done))
    :config
    (add-hook 'after-init-hook
              (lambda ()
                (when (bound-and-true-p ido-ubiquitous-mode)
                  (ido-ubiquitous-mode -1))
                (when (bound-and-true-p ido-mode)
                  (ido-mode -1))
                (ivy-mode 1)))

    (setq-default ivy-use-virtual-buffers t
                  ivy-count-format ""
                  ivy-initial-inputs-alist '((man . "^") (woman . "^"))
                  projectile-completion-system 'ivy)

    (use-package flx
      :config
      (setq-default ivy-re-builders-alist '((t . ivy--regex-fuzzy))))

    (use-package ivy-historian
      :config
      (add-hook 'after-init-hook (lambda () (ivy-historian-mode t))))

    (use-package ivy-smex
      :bind* (("M-x" . ivy-smex))))
#+END_SRC
** ido related
#+BEGIN_SRC emacs-lisp
  (use-package ido-ubiquitous)

  (use-package flx-ido
    :config
    (setq ido-enable-prefix nil
          ido-enable-flex-matching t
          ido-use-faces nil
          ido-create-new-buffer 'always
          ido-use-filename-at-point 'guess
          ido-max-prospects 10
          ido-default-file-method 'selected-window
          ido-auto-merge-work-directories-length -1)
    (flx-ido-mode 1))
#+END_SRC
* Useful handy packages
In order to be KESS, I'll only choose some little packages besides essential
packages loaded above.
#+BEGIN_SRC emacs-lisp
  (use-package popwin
    :config
    (popwin-mode 1))
  (use-package ag)
  (use-package ack)
  (use-package bookmark+)
  (use-package dtrt-indent
    :config
    (dtrt-indent-mode 1))
#+END_SRC
* Evil-mode
Maybe I can totally discard later?  And I'm think about create a minor mode like
[[https://github.com/chrisdone/god-mode][god-mode]] and evil-mode, but just a thin layer to provide vim's normal state and
visual state. =Of course, this will be a tough task for me now.=
** Features & thoughts
- use CapsLock to switch
- insert state as pure emacs
- normal state + visual state = view state (or browse state?)
** Evil setup
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :diminish undo-tree-mode
    :bind* (("C-:" . evil-ex)
            :map kess-prefix-map ("ESC" . evil-mode))
    :config
    (use-package powerline-evil
      :config
      (powerline-evil-vim-color-theme)
      (display-time-mode t))

    (unbind-key "C-z" evil-normal-state-map)
    (unbind-key "C-z" evil-motion-state-map)
    (unbind-key "C-z" evil-insert-state-map)

    ;; (setq evil-emacs-state-cursor '("red" box))
    ;; (setq evil-normal-state-cursor '("green" box))
    ;; (setq evil-visual-state-cursor '("orange" box))
    ;; (setq evil-insert-state-cursor '("red" bar))
    ;; (setq evil-replace-state-cursor '("red" bar))
    ;; (setq evil-operator-state-cursor '("red" hollow))

    (setq evil-esc-delay 0)

    (use-package evil-visualstar
      :config
      (global-evil-visualstar-mode t))

    (use-package evil-numbers
      :bind (:map evil-normal-state-map
                  ("+" . evil-numbers/inc-at-pt)
                  ("-" . evil-numbers/dec-at-pt)))

    (use-package evil-search-highlight-persist
      :bind (:map kess-prefix-map ("/" . evil-search-highlight-persist-remove-all))
      :config
      (global-evil-search-highlight-persist t))

    (use-package evil-leader
      :config
      (setq evil-leader/in-all-states 1)
      (evil-leader/set-leader ",")
      (global-evil-leader-mode)
      (evil-leader/set-key "/" 'evil-search-highlight-persist-remove-all)))
#+END_SRC
* Coding setup
** Syntax Check
Flycheck is a bit annoying when enabled globally, so I use it only when needed.
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :diminish flycheck-mode
    :bind (:map kess-prefix-map
                ("f" . flycheck-mode))
    :config
    (use-package flycheck-pos-tip)
    (when (display-graphic-p (selected-frame))
      (eval-after-load 'flycheck
        '(custom-set-variables
          '(flycheck-display-errors-function #'flycheck-pos-tip-error-messages)))))
#+END_SRC
** Templating
Learn more and get used to it.
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :diminish yas-minor-mode
  :config
  (setq yas-snippet-dirs (concat user-emacs-directory "snippets"))
  (yas-global-mode 1))
#+END_SRC
** Lisp coding setup
:PROPERTIES:
:CUSTOM_ID: paredit
:END:
#+BEGIN_SRC emacs-lisp
  (defun add-lisp-hook (func)
    (dolist (x '(scheme emacs-lisp lisp clojure lisp-interaction slime-repl cider-repl))
      (add-hook (intern (concat (symbol-name x) "-mode-hook")) func)))
#+END_SRC
*** clojure
#+BEGIN_SRC emacs-lisp
  (use-package clojure-mode :defer t)
  (use-package cider :defer t)
#+END_SRC
*** common lisp
#+BEGIN_SRC emacs-lisp
(load (expand-file-name "~/quicklisp/slime-helper.el"))
(setq inferior-lisp-program "sbcl")
#+END_SRC
*** paredit
#+BEGIN_SRC emacs-lisp
  (use-package paredit
    :demand
    :bind (:map paredit-mode-map
                ("C-." . paredit-forward-slurp-sexp)
                ("C-," . paredit-forward-barf-sexp)
                ("C-\>" . paredit-backward-barf-sexp)
                ("C-\<" . paredit-backward-slurp-sexp))
    :config
    (add-lisp-hook 'enable-paredit-mode))
#+END_SRC
*** emacs-lisp
#+BEGIN_SRC emacs-lisp
  (use-package eldoc
    :diminish eldoc-mode
    :config
    (eldoc-add-command 'paredit-backward-delete 'paredit-close-round)
    (add-lisp-hook (lambda () (eldoc-mode 1))))
#+END_SRC
** Ruby coding setup
#+BEGIN_SRC emacs-lisp
  ;;; Basic ruby setup
  (use-package ruby-mode
    :bind (:map ruby-mode-map
                ("TAB" . indent-for-tab-command))
    :config
    (use-package ruby-hash-syntax)

    (setq-default ruby-use-encoding-map nil
                  ruby-insert-encoding-magic-comment nil)

    (add-hook 'ruby-mode-hook
              (lambda ()
                (unless (derived-mode-p 'prog-mode)
                  (run-hooks 'prog-mode-hook))))
    (add-hook 'ruby-mode-hook 'subword-mode)

    (use-package rspec-mode)
    (use-package inf-ruby)
    (use-package ruby-compilation
      :config
      (defalias 'rake 'ruby-compilation-rake))

    (let ((m ruby-mode-map))
      (define-key m [S-f7] 'ruby-compilation-this-buffer)
      (define-key m [f7] 'ruby-compilation-this-test))

    (use-package robe
      :config
      (add-hook 'ruby-mode-hook 'robe-mode))

    (use-package yari
      :config
      (defalias 'ri 'yari))

    (use-package goto-gem)
    (use-package bundler)

    (use-package yaml-mode)

    (use-package mmm-mode
      :config
      (require 'mmm-erb)
      (require 'derived)
      (mmm-add-mode-ext-class 'html-erb-mode "\\.jst\\.ejs\\'" 'ejs)

      (add-to-list 'auto-mode-alist '("\\.jst\\.ejs\\'"  . html-erb-mode))
      (mmm-add-mode-ext-class 'yaml-mode "\\.yaml\\(\\.erb\\)?\\'" 'erb)))

#+END_SRC
** C# coding setup
More dig into omnisharp-emacs.
#+BEGIN_SRC emacs-lisp
  (use-package csharp-mode)
  (use-package omnisharp
    :config
    (setq omnisharp-server-executable-path "~/bin/omnisharp/OmniSharp")
    (when (file-exists-p omnisharp-server-executable-path)
      (add-hook 'csharp-mode-hook 'omnisharp-mode)
      (add-to-list 'company-backends 'company-omnisharp)))
#+END_SRC
** Common coding setup
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :config
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
    (add-lisp-hook 'rainbow-delimiters-mode))

  (use-package color-identifiers-mode
    :config
    (global-color-identifiers-mode))
#+END_SRC
* Project management
Just start to use them, maybe one of both is enough? Or maybe a wrapper package
to benefit from both? (Another tough task)
** projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :demand
    :config
    (projectile-global-mode)
    (setq projectile-indexing-method 'alien
          projectile-enable-caching t))
#+END_SRC
** find-file-in-project
#+BEGIN_SRC emacs-lisp
  (use-package find-file-in-project
    :ensure ivy
    :bind* (("M-o" . find-file-in-project)))
#+END_SRC
* Misc setup
#+BEGIN_SRC emacs-lisp
  ;; savehist
  (savehist-mode t)
  (setq savehist-file (concat user-emacs-directory "savehist"))
#+END_SRC
* Emacs server
Start server if not already running. Properly set server to work on MSWin is
painful.
#+BEGIN_SRC emacs-lisp
  (require 'server)
  (when (not (eq (server-running-p) t))
    (add-hook 'after-init-hook 'server-start))
#+END_SRC
